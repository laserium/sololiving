<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sololiving.domain.article.mapper.ArticleViewMapper">

    <!-- 댓글 상태 필터(차단된 사용자 및 삭제된 댓글 제외) -->
    <sql id="commentStatusFilter">
        WHERE c.status = 'NORMAL' 
        <if test="userId != null">
            AND NOT EXISTS (
                SELECT 1 
                FROM BLOCK b 
                WHERE b.blocker_id = #{userId}
                AND b.blocking_id = c.writer
            )
        </if>
    </sql>

    <!-- 게시글 상태 필터(삭제된 게시글, 블라인드 처리 된 게시글) -->
    <sql id="articleStatusFilter">
        AND a.status = 'NORMAL'
        <if test="userId != null">
            AND NOT EXISTS (
                SELECT 1
                FROM BLOCK b
                WHERE b.blocker_id = #{userId}
                AND b.blocking_id = a.writer
            )
        </if>
    </sql>

    <!-- 공통 정렬 조건 정의 -->
    <sql id="articleSorting">
        <choose>
            <when test="sort == 'recent'">a.created_at DESC</when>
            <when test="sort == 'likes'">a.like_cnt DESC</when>
            <when test="sort == 'views'">a.view_cnt DESC</when>
            <when test="sort == 'comments'">a.comment_count DESC</when>
            <when test="sort == 'score'">a.score DESC</when>
            <otherwise>a.created_at DESC</otherwise>
        </choose>
    </sql>

    <!-- 댓글 필터링을 포함한 게시글의 댓글 수 조회 -->
    <sql id="filteredCommentCount">
        SELECT 
            article_id,
            COUNT(*) AS filtered_comment_count
        FROM COMMENT c
        <include refid="commentStatusFilter" />
        GROUP BY article_id
    </sql>
    
    <!-- 추천 여부 확인 -->
    <sql id="isLikedCondition">
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM ARTICLE_LIKE al
                WHERE al.article_id = a.article_id
                AND al.user_id = #{userId}
            ) THEN TRUE
            ELSE FALSE
        END
    </sql>

        <!-- 검색 조건 필터 --> 
    <sql id="articleSearchFilter">
        <if test="(searchTitle != null and searchTitle != '') 
                or (searchContents != null and searchContents != '') 
                or (searchWriter != null and searchWriter != '')">
            AND (
                <if test="searchTitle != null and searchTitle != ''">
                    a.title LIKE CONCAT('%', #{searchTitle}, '%')
                </if>
                <if test="searchContents != null and searchContents != ''">
                    <choose>
                        <when test="searchTitle != null and searchTitle != ''">
                            OR 
                        </when>
                    </choose>
                    a.content LIKE CONCAT('%', #{searchContents}, '%')
                </if>
                <if test="searchWriter != null and searchWriter != ''">
                    <choose>
                        <when test="(searchTitle != null and searchTitle != '') or (searchContents != null and searchContents != '')">
                            OR 
                        </when>
                    </choose>
                    a.writer LIKE CONCAT('%', #{searchWriter}, '%')
                </if>
            )
        </if>
    </sql>

    <!-- 게시글 전체 조회 -->
    <select id="selectAllArticlesList" parameterType="map" resultType="com.sololiving.domain.article.dto.response.ViewAllArticlesListResponseDto">
        SELECT 
            ROW_NUMBER() OVER (ORDER BY <include refid="articleSorting" />) AS displayNumber,
            a.article_id AS articleId,
            a.writer,
            a.title,
            a.content,
            a.category_code AS categoryCode,
            a.like_cnt AS likeCnt,
            a.view_cnt AS viewCnt,
            a.score AS score,
            a.media_type AS mediaType,
            a.created_at AS createdAt,
            a.comment_count AS commentCount
        FROM ARTICLE a
        LEFT JOIN (
            <include refid="filteredCommentCount" />
        ) fc ON a.article_id = fc.article_id
        WHERE 1 = 1
        <include refid="articleStatusFilter" />
        ORDER BY <include refid="articleSorting" />
    </select>

    <!-- 게시글 목록 조회 -->
    <select id="selectArticlesByCategoryId" resultType="com.sololiving.domain.article.dto.response.ViewArticlesListResponseDto">
        SELECT 
            ((#{page} * #{limit}) - ROW_NUMBER() OVER (ORDER BY <include refid="articleSorting" />) + 1) AS displayNumber,
            a.article_id AS articleId,
            a.writer,
            a.title,
            a.content,
            a.like_cnt AS likeCnt,
            a.view_cnt AS viewCnt,
            a.score,
            a.media_type AS mediaType,
            COALESCE(fc.filtered_comment_count, 0) AS commentCount,
            a.created_at AS createdAt
        FROM ARTICLE a
        LEFT JOIN (
            <include refid="filteredCommentCount" />
        ) fc ON a.article_id = fc.article_id
        CROSS JOIN (SELECT COUNT(*) AS totalCount FROM ARTICLE WHERE category_code = #{categoryCode}) AS total
        WHERE a.category_code = #{categoryCode}
        <include refid="articleStatusFilter" />
        <include refid="articleSearchFilter" />
        ORDER BY <include refid="articleSorting" /> 
        LIMIT #{limit} OFFSET #{offset}
    </select>


    <!-- 게시글 상세 조회 -->
    <select id="selectByArticleId" resultType="com.sololiving.domain.article.dto.response.ViewArticleDetailsResponseDto">
        SELECT
            a.article_id AS articleId,
            a.writer,
            a.title,
            a.content,
            a.category_code AS categoryCode,
            a.like_cnt AS likeCnt,
            <include refid="isLikedCondition" /> AS isLiked,
            a.view_cnt AS viewCnt,
            a.score,
            a.media_type AS mediaType,
            COALESCE((
                SELECT COUNT(*)
                FROM COMMENT c
                WHERE c.article_id = a.article_id
                AND c.status = 'NORMAL' 
                <if test="userId != null">
                    AND NOT EXISTS (
                        SELECT 1 
                        FROM BLOCK b 
                        WHERE b.blocker_id = #{userId}
                        AND b.blocking_id = c.writer
                    )
                </if>
            ), 0) AS commentCount,
            a.status,
            a.created_at AS createdAt,
            a.updated_at AS updatedAt
        FROM ARTICLE a
        WHERE a.article_id = #{articleId}
        <include refid="articleStatusFilter" />
    </select>

    <!-- 메인 페이지 인기 게시글 TOP 10 조회 -->
    <select id="selectPopularArticles" resultType="com.sololiving.domain.article.dto.response.ViewTopArticlesResponseDto">
        SELECT 
            ROW_NUMBER() OVER (ORDER BY a.score DESC) AS displayNumber,
            a.article_id AS articleId,
            m.media_url AS thumbNailUrl,
            a.writer,
            a.title,
            a.content,
            a.like_cnt AS likeCnt,
            a.view_cnt AS viewCnt,
            a.score,
            a.comment_count AS commentCount,
            a.media_type AS mediaType,
            a.created_at AS createdAt
        FROM ARTICLE a
        LEFT JOIN MEDIA m ON a.article_id = m.article_id
        AND m.media_type = 'IMAGE'
        WHERE a.status = 'NORMAL'
        AND a.score &gt;= 20
        ORDER BY a.score DESC
        LIMIT 10
    </select>

    <!-- 사용자가 작성한 게시글 목록 조회 -->
    <select id="selectUserArticles" resultType="com.sololiving.domain.article.dto.response.ViewArticlesListResponseDto">
        SELECT 
            ROW_NUMBER() OVER (ORDER BY <include refid="articleSorting" />) AS displayNumber,
            a.article_id AS articleId,
            a.writer,
            a.title,
            a.content,
            a.like_cnt AS likeCnt,
            a.view_cnt AS viewCnt,
            a.score,
            a.media_type AS mediaType,
            COALESCE(fc.filtered_comment_count, 0) AS commentCount,
            a.created_at AS createdAt
        FROM ARTICLE a
        LEFT JOIN (
            <include refid="filteredCommentCount" />
        ) fc ON a.article_id = fc.article_id
        <if test="categoryCode != null and categoryCode != ''">
            WHERE a.category_code = #{categoryCode}
        </if>
        <include refid="articleStatusFilter" />
        <include refid="articleSearchFilter" />
        <if test="writer != null and writer != ''">
            AND a.writer = #{writer}
        </if>
        ORDER BY <include refid="articleSorting" /> 
        LIMIT #{limit} OFFSET #{page}
    </select>

    <!-- 사용자가 추천한 게시글 목록 조회 -->
    <select id="selectUserLikeArticles" resultType="com.sololiving.domain.article.dto.response.ViewArticlesListResponseDto">
        SELECT 
            ROW_NUMBER() OVER (ORDER BY <include refid="articleSorting" />) AS displayNumber,
            a.article_id AS articleId,
            a.writer,
            a.title,
            a.content,
            a.like_cnt AS likeCnt,
            a.view_cnt AS viewCnt,
            a.score,
            a.media_type AS mediaType,
            COALESCE(fc.filtered_comment_count, 0) AS commentCount,
            a.created_at AS createdAt
        FROM ARTICLE a
        JOIN ARTICLE_LIKE al ON a.article_id = al.article_id
        LEFT JOIN (
            <include refid="filteredCommentCount" />
        ) fc ON a.article_id = fc.article_id
        WHERE al.user_id = #{writer} <!-- 사용자가 추천한 게시글 필터링 -->
        <include refid="articleStatusFilter" />
        <include refid="articleSearchFilter" />
        ORDER BY <include refid="articleSorting" />
        LIMIT #{limit} OFFSET #{page}
    </select>


</mapper>
