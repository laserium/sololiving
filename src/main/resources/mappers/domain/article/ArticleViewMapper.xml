<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sololiving.domain.article.mapper.ArticleViewMapper">

    <!-- 게시글 상태 필터(삭제된 게시글, 블라인드 처리 된 게시글) -->
    <sql id="articleStatusFilter">
        AND a.status IN 'NORMAL'
        <if test="userId != null">
            AND NOT EXISTS (
                SELECT 1
                FROM BLOCK b
                WHERE b.blocker_id = #{userId}
                AND b.blocking_id = a.writer
            )
        </if>
    </sql>

    <!-- 공통 정렬 조건 정의 -->
    <sql id="articleSorting">
        <choose>
            <when test="sort == 'recent'">a.created_at DESC</when>
            <when test="sort == 'likes'">a.like_cnt DESC</when>
            <when test="sort == 'views'">a.view_cnt DESC</when>
            <when test="sort == 'comments'">a.comment_count DESC</when>
            <when test="sort == 'score'">a.score DESC</when>
            <otherwise>a.created_at DESC</otherwise>
        </choose>
    </sql>

    <!-- 게시글 전체 조회 -->
    <select id="selectAllArticlesList" parameterType="map" resultType="com.sololiving.domain.article.dto.response.ViewAllArticlesListResponseDto">
        SELECT 
            ROW_NUMBER() OVER (ORDER BY <include refid="articleSorting" />) AS displayNumber,
            a.article_id AS articleId,
            a.writer,
            a.title,
            a.content,
            a.category_code AS categoryCode,
            a.like_cnt AS likeCnt,
            a.view_cnt AS viewCnt,
            a.score AS score,
            a.media_type AS mediaType,
            a.created_at AS createdAt,
            a.comment_count AS commentCount
        FROM ARTICLE a
        WHERE 1 = 1
        <include refid="articleStatusFilter" />
        ORDER BY <include refid="articleSorting" />
    </select>

    <!-- 게시글 목록 조회 - 카테고리 별 -->
    <select id="selectArticlesByCategoryId" resultType="com.sololiving.domain.article.dto.response.ViewArticlesListResponseDto">
        SELECT 
            ROW_NUMBER() OVER (ORDER BY <include refid="articleSorting" />) AS displayNumber,
            a.article_id AS articleId,
            a.writer,
            a.title,
            a.content,
            a.like_cnt AS likeCnt,
            a.view_cnt AS viewCnt,
            a.score,
            a.media_type AS mediaType,
            a.comment_count AS commentCount,
            a.created_at AS createdAt
        FROM ARTICLE a
        WHERE a.category_code = #{categoryCode}
        <include refid="articleStatusFilter" /> 

        ORDER BY <include refid="articleSorting" /> 
        LIMIT 20 OFFSET #{page}
    </select>

     <!-- 게시글 상세 조회 -->
    <select id="selectByArticleId" resultType="com.sololiving.domain.article.dto.response.ViewArticleResponseICDto$ViewArticleDetailsResponseDto">
        SELECT
            article_id AS articleId,
            writer,
            title,
            content,
            category_code AS categoryCode,
            like_cnt AS likeCnt,
            view_cnt AS viewCnt,
            score,
            status,
            created_at AS createdAt,
            updated_at AS updatedAt
        FROM ARTICLE
        WHERE article_id = #{articleId}
    </select>
    
    <!-- 메인 페이지 : 일주일간 인기 게시글 TOP 5 조회 -->
    <select id="selectPopularArticleListInMain" resultType="com.sololiving.domain.article.dto.response.ViewArticleResponseICDto$ViewTopArticlesResponseDto">
        SELECT
            article_id AS articleId,
            writer,
            title,
            like_cnt AS likeCnt,
            view_cnt AS viewCnt,
            created_at AS createdAt,
            score AS score
        FROM ARTICLE
        WHERE created_at BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW()
        AND like_cnt &gt;= 10
        ORDER BY score DESC
        LIMIT 5
    </select>


    <!-- 메인 페이지 : 대표 카테고리의 게시글 목록 조회 -->
    <select id="selectArticlesListInMain" resultType="com.sololiving.domain.article.dto.response.ViewArticleResponseICDto$ViewCategoryArticlesResponseDto">
        SELECT
            article_id AS articleId,
            writer,
            title,
            like_cnt AS likeCnt,
            view_cnt AS viewCnt,
            created_at AS createdAt
        FROM ARTICLE
        WHERE category_code = #{categoryCode}
        ORDER BY created_at DESC
        LIMIT 5
    </select>

</mapper>
